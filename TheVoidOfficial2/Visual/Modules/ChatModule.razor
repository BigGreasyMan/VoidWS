@page "/ChatMod/{_streamID:int}"
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.SignalR.Client;
@using System.ComponentModel
@using Microsoft.AspNetCore.Identity
@using TheVoidOfficial2.Logic.Database
@using TheVoidOfficial2.Logic.Middleware
@using TheVoidOfficial2.Logic;
@using TheVoidOfficial2.Logic.Commuication;
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _state
@inject UserManager<IdentityUser> _userManager
@inject IHttpContextAccessor httpContextAccessor;
@inject ICookie cookie;
@inject IJSRuntime JS;
@inject IUserSettingManager _usm
@implements IDisposable;




    <div style="width: 100%; height: 100%; position:absolute;">

    <div class="BaseContainer">
    
        <div class="VideoContainer">

            <hr class="LineHorizontal" style=" width: 98%; ">
    
            <hr class="LineVertical" style="position: absolute; margin-top: 2px; height: 45%; right: 0%;">
            <!-- position: absolute; border: 0px; border-left:1px solid red; height: 100%; right: 0%;  -->
          
                <div  style="margin: 10px;"> 

                     <video  style="width: 100%; position: relative; z-index: 0; "
                    id="my-player"
                    class="video-js"
                    controls
                    preload="auto"
                    data-setup='{}'>
                 
                    <p class="vjs-no-js">
                    To view this video please enable JavaScript, and consider upgrading to a
                    web browser that
                    supports HTML5 video
                    </p>
                    </video>
                </div>
    
                
                <label class="StreamStats">Watching  → <span style="color:#3EE684">1091</span></label>
                <label class="StreamStats" style="float: right;"><span style="color:#3EE684">StreamName</span> Actually Trash Gameplay, dont watch me please, please do |</label>
                <div class="StreamStats">Uptime  → <span style="color:#3EE684">1:23:2</span></div>
        </div>
    
    
    
        <div  class="ChatSection">
            <div  id="ChatContainer"  class="ChatContainer" style=" height: 100%; ">
                <div id="StatsButton" style="position: absolute; right: 0%;">Stats</div>
                <div>
                    <label style="font-style: italic; color: white; font-size: 22px;">Chat</label>
                   
    
                    <hr class="LineHorizontal" style="margin-top: 0%; margin-bottom: 1px; ">

                    
                </div>
                        
                <div  style="display: flex; flex-grow: 2;   flex-direction: column; height: 100%; overflow-y: hidden;">

                    <div id="StatsPannel" style="margin-top: 0%; position: absolute; top: -3%;" >
                        <div style="display: inline-block; margin-bottom: 4px;">
                            TotalMessages : 1000
                        </div>
                        <span> | </span>
                        <div style="display: inline-block;">
                            MessagesPS : 1000
                        </div>
                    </div>

                    
                    <div id="MessageContainer" class="MessageContainer" style="color: white;  flex-grow: 1; ">
                        <div class="Message"> <span >Username </span>→ <span > message</span></div>
                    </div> 

                    <div class="BottomChat"  >
                        <hr class="LineHorizontal" style="margin-top: 0%; ">
                        <div id="MaxCharMessage" style="position: absolute; opacity: 0;">
                                You have hit the MaxCharCount !!
                            </div>
                            <div id="InputContainer"  style="border: 1px solid #843EE6; border-radius: 3px; position: relative; display: flex;">
                                <textarea @bind=@TextAreaContent @ref="TextArea"  id="InputBox" placeholder=@TextAreaPlaceHolder maxlength="100" class=@TextAreaClass >
                                </textarea>
                            </div>
                            <div style="font-size: 25px; font-style: italic; color: white;  position: relative; display: flex; justify-content: flex-end; gap: 5px;" >
                                <div @onclick=SendMessage style="display: inline;">
                                        Send
                                </div>
                                <img  src="/SettingsCog.svg" style="width: 20px; ">
                        </div>
                    </div>

                </div>
    
            </div>
        </div>
    </div>
</div>


@code {
    //string myMarkup = "<source src='http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4' type='video/mp4'> a </source>";
    [Parameter]
    public int _streamID { get; set; } = 0;

    HubConnection _hubConnection;

    List<string> _messages = new List<string>();

    bool _sentDisabled = true;

    string _sendValue = "";

    string _error = "everything is fine";

    string _hubUrl;

    string _userName = "";

    string _userId = "";

    string TextAreaClass = "TextArea TextAreaEnabled";

    string TextAreaPlaceHolder = "Must be logged in";

    string TextAreaContent = "";

    ElementReference TextArea;

    protected async override Task OnInitializedAsync()
    {

        var temp = httpContextAccessor;
        var user = await _state.GetAuthenticationStateAsync();
        //TODO this will kill somthing
         _userId = user.User.Claims.First().Value;

        if (user.User.Identity.IsAuthenticated) 
        { 
            _sentDisabled = false; _userName = user.User.Identity.Name;
        }
    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await JS.InvokeVoidAsync("OnStreamingPageLoad");


              var cookieData = await cookie.GetCookie("pref");

            if (cookieData == null)
            {
                var setting = await _usm.GetSetting(_userId);
               
                await cookie.Create("pref", setting.textColor, 1);
            }
            else
            {
            cookieData = cookieData.Split(";")[0];

            }

            if (_streamID != 0 )
                {

                    string baseUrl = _navigationManager.BaseUri;
                    _hubUrl = baseUrl.TrimEnd('/') + GlobalChatHub.HubUrl;
                    //rooms?
                    Console.WriteLine("Connection Made at room:" + _streamID);
                    _hubConnection = new HubConnectionBuilder()
                        .WithUrl(_hubUrl)
                        .Build();

                    _hubConnection.On<string, string>("ClientRec", ClientRec);

                    await _hubConnection.StartAsync().ConfigureAwait(true);

                    await _hubConnection.SendAsync("JoinRoom", _streamID.ToString(),_userName);
                    _messages.Add(_userName + "|" + "had joined the room");
                        StateHasChanged();
                }
                else
                {

                    _error = "you need to pass a streamID in url";
                    StateHasChanged();
                }
        }
    }


    private async void ClientRec(string message,string name)
    {
        _messages.Add(name + "|" + message);
        //TODO maybe improve

        await InvokeAsync(() => { StateHasChanged(); });
    }

    private  Task SendMessage()
    {
        Console.WriteLine("Does this worky? : "+TextAreaContent);
       
        //because of return we cannot factorise
        if (TextAreaContent.Length == 0) { return Task.CompletedTask; }
        _messages.Add(_userName + "|" + _sendValue);
         StateHasChanged();
        return _hubConnection.SendAsync("Broadcast", _streamID.ToString(),_sendValue,_userName);
    }

     public void Dispose()
    {
        //_hubConnection.InvokeAsync("LeaveRoom",_streamID,_userName);
    }

  
}
