@page "/"
@using TheVoidOfficial2.Logic.Database;
@using TheVoidOfficial2.Visual.Modules;
@inject IJSRuntime JS;

<ContentPresenter>
    <Page>
        <Terminal @ref="Terminal" _dialog="@CurrentDialog" ></Terminal>
        <br />
        <br />
        <div style="display:flex; flex-direction:row; justify-content:space-around; width:100%;">
            <ColumDataFlow @ref="Flow2" Name="NewTabs" Title="News" Data=@NewsData>

            </ColumDataFlow>

             <ColumDataFlow @ref="Flow1" Name="StreamTab" Title="Streams" Data=@StreamData>

            </ColumDataFlow>

        </div>

          <br />
        <br />
    </Page>
</ContentPresenter>

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    Terminal Terminal;

    ColumDataFlow Flow1;

    ColumDataFlow Flow2;
    // @"Welcome to the void..... << You are not currently logged in, Click on page selector and login "
    string[] Dialogs = new string[2] 
        { @"Welcome to the void..... << You are not currently logged in, Click on page selector and login"
        , "Welcome back to the void, {0}  << Enjoy :)," 
        };

    List<ColumnDataFlowModel> NewsData = new List<ColumnDataFlowModel>()
    {
        new ColumnDataFlowModel()
        { Date = "15th May 1991  →",Content="Website REWORK inbound "  },
        new ColumnDataFlowModel()
        { Date = "15th May 1991 →",Content="liate, first streaming to hit 20000 followers" },
          new ColumnDataFlowModel()
        { Date = "15th May 1991 →",Content="Major site update inbound" },
            new ColumnDataFlowModel()
        { Date = "15th May 1991 →",Content="Major site update inbound" },
            new ColumnDataFlowModel()
        { Date = "15th May 1991 →",Content="Major site update inbound" },
            new ColumnDataFlowModel()
        { Date = "15th May 1991 →",Content="Major site update inbound" }
    };
    /*#843EE6 Purple*/
    /*#3EE684 Green*/
    //990a0a RED
    List<ColumnDataFlowModel> StreamData = new List<ColumnDataFlowModel>() 
    {
        new ColumnDataFlowModel()
        { Date = @"<span style=""color:#3EE684"">Joe</span>  <span style=""color:#990a0a"">isLive</span> → 200000 <span style=""color:#843EE6"">Viewers</span>",Content="Rebuilding the lets play house again guys ,sorry" },
         new ColumnDataFlowModel()
        { Date = @"<span style=""color:#3EE684"">Paulv81</span>  <span style=""color:#990a0a"">isLive</span> → 100000 <span style=""color:#843EE6"">Viewers</span>",Content="Again boys, we are back GAMING WARLORD LEGEND" },
            new ColumnDataFlowModel()
        { Date = @"<span style=""color:#3EE684"">Joe</span>  <span style=""color:#990a0a"">isLive</span> → 200000 <span style=""color:#843EE6"">Viewers</span>",Content="Rebuilding the lets play house again guys ,sorry" },
         new ColumnDataFlowModel()
        { Date = @"<span style=""color:#3EE684"">Paulv81</span>  <span style=""color:#990a0a"">isLive</span> → 100000 <span style=""color:#843EE6"">Viewers</span>",Content="Again boys, we are back GAMING WARLORD LEGEND" },
    };

    string CurrentDialog;


    protected override async Task OnInitializedAsync()
    {
        CurrentDialog =  Dialogs[0];

        var authState = await AuthenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        { CurrentDialog = string.Format(Dialogs[1], user.Identity.Name); }

        await base.OnInitializedAsync();
    }


    protected override void OnAfterRender(bool firstRender)
    {
        Terminal.DialogFished += DialogFinished;

        base.OnAfterRender(firstRender);
    }


    private async void DialogFinished(object sender, EventArgs e)
    {
        Flow1.Load();
         Flow2.Load();
        //await JS.InvokeVoidAsync("animationFade", "header1"); 
    }

}

    