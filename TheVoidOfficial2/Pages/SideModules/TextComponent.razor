@page "/Text"
@inject IJSRuntime JS;





<label class="TerminalHead" id="header1">
    Void Terminal V1 <span>©</span>  
</label>

<button @onclick="SpeedChange">Speed : @speedUI</button>


<label class="TerminalHead" id="flowHead">
   Location: <span>"/"</span> -  Data Rec: <span>102 KB</span> - Data Sent: <span>102 KB</span> -   
</label>


<br />

<br />

<label id="textComp"  style="width:400px; height:400px; color:#843EE6"></label>

<br />
<br />



@code {

    [Parameter]
    public string _dialog { get; set; }

    double speedUI = 1;

    double speedMod = 1;

    int delay = 50;

    public event EventHandler DialogFished;

    ElementReference _lab;

    private string _outputtedDialog  = "";


    private bool _isDialogActive = false;

    private async Task PrintText()
    {
        await JS.InvokeVoidAsync("animationFade", "flowHead"); 
        await JS.InvokeVoidAsync("animationFade", "header1"); 
        var currentDialog = _dialog.ToCharArray();


        for(int x = 0; x < currentDialog.Count(); x++)
        {

            await Task.Delay((int)(delay * (speedMod)));

            var cChar = currentDialog[x].ToString();
            if (cChar == "<")
            {
                _outputtedDialog += "<br/>";
                await JS.InvokeVoidAsync("appendSpace","<br/>");

                StateHasChanged();
                continue;
            }
            _outputtedDialog += currentDialog[x].ToString();
            await JS.InvokeVoidAsync("appendSpace",currentDialog[x].ToString());
            StateHasChanged();


        }
        DialogFished?.Invoke(this, EventArgs.Empty);

    }

    private void SpeedChange()
    {
        if (speedMod == 0)
        {
            speedMod = 1;
            speedUI = 1;
            return; 
        }
        speedUI += 0.25;
        speedMod -= 0.25;
    }


    protected override void OnInitialized()
    {

        PrintText();
        base.OnInitialized();
    }

    protected override Task OnInitializedAsync()
    {
        
        return base.OnInitializedAsync();
    }
}
