@page "/Text"
@inject IJSRuntime JS;


<div style="width:100%; position:relative">

<label class="TerminalHead" >
    Void Terminal V1 <span>©</span>  
</label>

<button @onclick="SpeedChange" style="position:absolute; width:100px; left:20%; height:25px">@delay</button>

<label class="TerminalHead" style=" right:0%;">
   Location: <span>"/"</span> -  Data Rec: <span>102 KB</span> - Data Sent: <span>102 KB</span> -   
</label>
</div>

<br />
<br />

<label id="textComp"  style="width:400px; height:400px; color:#843EE6"></label>





@code {

    [Parameter]
    public string _dialog { get; set; }

    int delay = 100;

  

    ElementReference _lab;

    private string _outputtedDialog  = "";


    private bool _isDialogActive = false;

    private async Task PrintText()
    {
        var currentDialog = _dialog.ToCharArray();


        for(int x = 0; x < currentDialog.Count(); x++)
        {
            
            await Task.Delay(delay);

            var cChar = currentDialog[x].ToString();
            if (cChar == "<")
            {
                _outputtedDialog += "<br/>";
                await JS.InvokeVoidAsync("appendSpace","<br/>");

                StateHasChanged();
                continue;
            }
            _outputtedDialog += currentDialog[x].ToString();
            await JS.InvokeVoidAsync("appendSpace",currentDialog[x].ToString());
            StateHasChanged();


        }


    }

    private void SpeedChange()
    {
        if (delay == 0)
        {
            delay = 100;
            return; 
        }
        
        delay = delay - 10;
    }


    protected override void OnInitialized()
    {
        
        PrintText();
        base.OnInitialized();
    }
}
